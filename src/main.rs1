
// use futures::future::{lazy, Future};

// fn main() {

//     let c = awc::Client::new();

//     let cr = c.get("http://www.baidu.com")
//         .send()                             // <- Send http request
//           .map_err(|_| ())
//           .and_then(|response| {              // <- server http response
//                println!("Response: {:?}", response);
//                Ok(())
//           });

//     // println!("Hello, world!  {:?}", cr);
// }



use futures::future::{lazy, Future};
use actix_rt::System;
use awc::Client;

fn main() {
    let x = System::new("test").block_on(lazy(|| {
       let mut client = hyper::Client::default();

       client.get("http://www.baidu.com") // <- Create request builder
        //   .header("User-Agent", "Actix-web")
          .send()                             // <- Send http request
          .map_err(|_| ())
          .and_then(|mut response| {              // <- server http response
               println!("Response: {:?}", response.body().poll().unwrap());
               Ok((response))
          })
    }));

    println!("x {:?}",x);
}